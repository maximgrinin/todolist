name: build and deploy workflow
on:
  push:
    branch:
      - 'main'
jobs:
  linting_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: clone code
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  build_and_push:
    runs-on: ubuntu-latest
    needs: linting_and_test
    steps:
      - name: clone code
        uses: actions/checkout@v3
      - name: dockerhub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          target: dev_image
          file: ./dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/diploma_todolist:latest

#on: [push]
#jobs:
#  linting_and_test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: clone code
#        uses: actions/checkout@v3
#      - name: setup python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#      - name: install python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#  build_and_push:
#    runs-on: ubuntu-latest
#    needs: linting_and_test
#    steps:
#      - name: clone code
#        uses: actions/checkout@v3
#      - name: docker build
#        run: docker build -t maximgrinin/my_instagramm_app:$GITHUB_REF_NAME-$GITHUB_RUN_ID .
#      - name: docker login
#        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#      - name: docker push
#        run: docker push maximgrinin/my_instagramm_app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build_and_push
#    steps:
#      - name: clone code
#        uses: actions/checkout@v3
#      - name: render configs
#        run: |
#          mkdir deploy
#          cat docker-compose-ci.yaml | envsubst > deploy/docker-compose.yaml
#      - name: copy file to server via ssh
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          source: "deploy/docker-compose.yaml"
#          target: "insta_app_ci"
#          strip_components: 1
#      - name: deploy app
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          script: |
#            cd insta_app_ci
#            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker-compose up -d
